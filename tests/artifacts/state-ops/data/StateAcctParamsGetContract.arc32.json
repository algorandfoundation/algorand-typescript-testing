{
    "hints": {
        "verify_acct_balance(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_min_balance(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_auth_addr(account)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_num_uint(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_num_byte_slice(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_extra_app_pages(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_apps_created(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_apps_opted_in(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_assets_created(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_assets(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_boxes(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_total_box_bytes(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_acct_incentive_eligible(account)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StateAcctParamsGetContract",
        "methods": [
            {
                "name": "verify_acct_balance",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_min_balance",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_auth_addr",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "verify_acct_total_num_uint",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_num_byte_slice",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_extra_app_pages",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_apps_created",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_apps_opted_in",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_assets_created",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_assets",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_boxes",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_total_box_bytes",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "verify_acct_incentive_eligible",
                "args": [
                    {
                        "type": "account",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}