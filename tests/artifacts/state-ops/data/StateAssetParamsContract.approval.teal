#pragma version 10

tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.approvalProgram:
    intcblock 1 0
    bytecblock 0x151f7c75
    callsub __puya_arc4_router__
    return


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@16
    pushbytess 0xad719a6f 0x1d603013 0x9fb731cd 0x0f5a4911 0xf5b370c6 0xc7d6af74 0x6b71a263 0x3040ebc8 0x1d07e844 0x3e40cb50 0x340c786b 0xe38a9815 // method "verify_asset_params_get_total(asset)uint64", method "verify_asset_params_get_decimals(asset)uint64", method "verify_asset_params_get_default_frozen(asset)bool", method "verify_asset_params_get_unit_name(asset)byte[]", method "verify_asset_params_get_name(asset)byte[]", method "verify_asset_params_get_url(asset)byte[]", method "verify_asset_params_get_metadata_hash(asset)byte[]", method "verify_asset_params_get_manager(asset)address", method "verify_asset_params_get_reserve(asset)address", method "verify_asset_params_get_freeze(asset)address", method "verify_asset_params_get_clawback(asset)address", method "verify_asset_params_get_creator(asset)address"
    txna ApplicationArgs 0
    match __puya_arc4_router___verify_asset_params_get_total_route@2 __puya_arc4_router___verify_asset_params_get_decimals_route@3 __puya_arc4_router___verify_asset_params_get_default_frozen_route@4 __puya_arc4_router___verify_asset_params_get_unit_name_route@5 __puya_arc4_router___verify_asset_params_get_name_route@6 __puya_arc4_router___verify_asset_params_get_url_route@7 __puya_arc4_router___verify_asset_params_get_metadata_hash_route@8 __puya_arc4_router___verify_asset_params_get_manager_route@9 __puya_arc4_router___verify_asset_params_get_reserve_route@10 __puya_arc4_router___verify_asset_params_get_freeze_route@11 __puya_arc4_router___verify_asset_params_get_clawback_route@12 __puya_arc4_router___verify_asset_params_get_creator_route@13
    intc_1 // 0
    retsub

__puya_arc4_router___verify_asset_params_get_total_route@2:
    // tests/artifacts/state-ops/contract.algo.ts:157
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:157
    // @arc4.abimethod()
    callsub verify_asset_params_get_total
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_decimals_route@3:
    // tests/artifacts/state-ops/contract.algo.ts:166
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:166
    // @arc4.abimethod()
    callsub verify_asset_params_get_decimals
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_default_frozen_route@4:
    // tests/artifacts/state-ops/contract.algo.ts:175
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:175
    // @arc4.abimethod()
    callsub verify_asset_params_get_default_frozen
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_unit_name_route@5:
    // tests/artifacts/state-ops/contract.algo.ts:184
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:184
    // @arc4.abimethod()
    callsub verify_asset_params_get_unit_name
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_name_route@6:
    // tests/artifacts/state-ops/contract.algo.ts:193
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:193
    // @arc4.abimethod()
    callsub verify_asset_params_get_name
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_url_route@7:
    // tests/artifacts/state-ops/contract.algo.ts:202
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:202
    // @arc4.abimethod()
    callsub verify_asset_params_get_url
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_metadata_hash_route@8:
    // tests/artifacts/state-ops/contract.algo.ts:211
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:211
    // @arc4.abimethod()
    callsub verify_asset_params_get_metadata_hash
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_manager_route@9:
    // tests/artifacts/state-ops/contract.algo.ts:220
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:220
    // @arc4.abimethod()
    callsub verify_asset_params_get_manager
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_reserve_route@10:
    // tests/artifacts/state-ops/contract.algo.ts:229
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:229
    // @arc4.abimethod()
    callsub verify_asset_params_get_reserve
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_freeze_route@11:
    // tests/artifacts/state-ops/contract.algo.ts:238
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:238
    // @arc4.abimethod()
    callsub verify_asset_params_get_freeze
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_clawback_route@12:
    // tests/artifacts/state-ops/contract.algo.ts:247
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:247
    // @arc4.abimethod()
    callsub verify_asset_params_get_clawback
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___verify_asset_params_get_creator_route@13:
    // tests/artifacts/state-ops/contract.algo.ts:256
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:256
    // @arc4.abimethod()
    callsub verify_asset_params_get_creator
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    retsub

__puya_arc4_router___bare_routing@16:
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@20
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    retsub

__puya_arc4_router___after_if_else@20:
    // tests/artifacts/state-ops/contract.algo.ts:156
    // export class StateAssetParamsContract extends arc4.Contract {
    intc_1 // 0
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_total(a: uint64) -> uint64:
verify_asset_params_get_total:
    // tests/artifacts/state-ops/contract.algo.ts:157-158
    // @arc4.abimethod()
    // public verify_asset_params_get_total(a: Asset): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:159
    // const [value, exists] = op.AssetParams.assetTotal(a)
    frame_dig -1
    asset_params_get AssetTotal
    // tests/artifacts/state-ops/contract.algo.ts:160
    // const [value_index, exists_index] = op.AssetParams.assetTotal(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetTotal
    // tests/artifacts/state-ops/contract.algo.ts:161
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:162
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:163
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::get_1st_ref_index() -> uint64:
get_1st_ref_index:
    // tests/artifacts/state-ops/contract.algo.ts:22
    // function get_1st_ref_index(): uint64 {
    proto 0 1
    // tests/artifacts/state-ops/contract.algo.ts:23
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_decimals(a: uint64) -> uint64:
verify_asset_params_get_decimals:
    // tests/artifacts/state-ops/contract.algo.ts:166-167
    // @arc4.abimethod()
    // public verify_asset_params_get_decimals(a: Asset): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:168
    // const [value, exists] = op.AssetParams.assetDecimals(a)
    frame_dig -1
    asset_params_get AssetDecimals
    // tests/artifacts/state-ops/contract.algo.ts:169
    // const [value_index, exists_index] = op.AssetParams.assetDecimals(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetDecimals
    // tests/artifacts/state-ops/contract.algo.ts:170
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:171
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:172
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_default_frozen(a: uint64) -> uint64:
verify_asset_params_get_default_frozen:
    // tests/artifacts/state-ops/contract.algo.ts:175-176
    // @arc4.abimethod()
    // public verify_asset_params_get_default_frozen(a: Asset): boolean {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:177
    // const [value, exists] = op.AssetParams.assetDefaultFrozen(a)
    frame_dig -1
    asset_params_get AssetDefaultFrozen
    // tests/artifacts/state-ops/contract.algo.ts:178
    // const [value_index, exists_index] = op.AssetParams.assetDefaultFrozen(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetDefaultFrozen
    // tests/artifacts/state-ops/contract.algo.ts:179
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:180
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:181
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_unit_name(a: uint64) -> bytes:
verify_asset_params_get_unit_name:
    // tests/artifacts/state-ops/contract.algo.ts:184-185
    // @arc4.abimethod()
    // public verify_asset_params_get_unit_name(a: Asset): bytes {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:186
    // const [value, exists] = op.AssetParams.assetUnitName(a)
    frame_dig -1
    asset_params_get AssetUnitName
    // tests/artifacts/state-ops/contract.algo.ts:187
    // const [value_index, exists_index] = op.AssetParams.assetUnitName(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetUnitName
    // tests/artifacts/state-ops/contract.algo.ts:188
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:189
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:190
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_name(a: uint64) -> bytes:
verify_asset_params_get_name:
    // tests/artifacts/state-ops/contract.algo.ts:193-194
    // @arc4.abimethod()
    // public verify_asset_params_get_name(a: Asset): bytes {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:195
    // const [value, exists] = op.AssetParams.assetName(a)
    frame_dig -1
    asset_params_get AssetName
    // tests/artifacts/state-ops/contract.algo.ts:196
    // const [value_index, exists_index] = op.AssetParams.assetName(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetName
    // tests/artifacts/state-ops/contract.algo.ts:197
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:198
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:199
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_url(a: uint64) -> bytes:
verify_asset_params_get_url:
    // tests/artifacts/state-ops/contract.algo.ts:202-203
    // @arc4.abimethod()
    // public verify_asset_params_get_url(a: Asset): bytes {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:204
    // const [value, exists] = op.AssetParams.assetUrl(a)
    frame_dig -1
    asset_params_get AssetURL
    // tests/artifacts/state-ops/contract.algo.ts:205
    // const [value_index, exists_index] = op.AssetParams.assetUrl(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetURL
    // tests/artifacts/state-ops/contract.algo.ts:206
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:207
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:208
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_metadata_hash(a: uint64) -> bytes:
verify_asset_params_get_metadata_hash:
    // tests/artifacts/state-ops/contract.algo.ts:211-212
    // @arc4.abimethod()
    // public verify_asset_params_get_metadata_hash(a: Asset): bytes {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:213
    // const [value, exists] = op.AssetParams.assetMetadataHash(a)
    frame_dig -1
    asset_params_get AssetMetadataHash
    // tests/artifacts/state-ops/contract.algo.ts:214
    // const [value_index, exists_index] = op.AssetParams.assetMetadataHash(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetMetadataHash
    // tests/artifacts/state-ops/contract.algo.ts:215
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:216
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:217
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_manager(a: uint64) -> bytes:
verify_asset_params_get_manager:
    // tests/artifacts/state-ops/contract.algo.ts:220-221
    // @arc4.abimethod()
    // public verify_asset_params_get_manager(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:222
    // const [value, exists] = op.AssetParams.assetManager(a)
    frame_dig -1
    asset_params_get AssetManager
    // tests/artifacts/state-ops/contract.algo.ts:223
    // const [value_index, exists_index] = op.AssetParams.assetManager(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetManager
    // tests/artifacts/state-ops/contract.algo.ts:224
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:225
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:226
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_reserve(a: uint64) -> bytes:
verify_asset_params_get_reserve:
    // tests/artifacts/state-ops/contract.algo.ts:229-230
    // @arc4.abimethod()
    // public verify_asset_params_get_reserve(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:231
    // const [value, exists] = op.AssetParams.assetReserve(a)
    frame_dig -1
    asset_params_get AssetReserve
    // tests/artifacts/state-ops/contract.algo.ts:232
    // const [value_index, exists_index] = op.AssetParams.assetReserve(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetReserve
    // tests/artifacts/state-ops/contract.algo.ts:233
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:234
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:235
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_freeze(a: uint64) -> bytes:
verify_asset_params_get_freeze:
    // tests/artifacts/state-ops/contract.algo.ts:238-239
    // @arc4.abimethod()
    // public verify_asset_params_get_freeze(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:240
    // const [value, exists] = op.AssetParams.assetFreeze(a)
    frame_dig -1
    asset_params_get AssetFreeze
    // tests/artifacts/state-ops/contract.algo.ts:241
    // const [value_index, exists_index] = op.AssetParams.assetFreeze(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetFreeze
    // tests/artifacts/state-ops/contract.algo.ts:242
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:243
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:244
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_clawback(a: uint64) -> bytes:
verify_asset_params_get_clawback:
    // tests/artifacts/state-ops/contract.algo.ts:247-248
    // @arc4.abimethod()
    // public verify_asset_params_get_clawback(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:249
    // const [value, exists] = op.AssetParams.assetClawback(a)
    frame_dig -1
    asset_params_get AssetClawback
    // tests/artifacts/state-ops/contract.algo.ts:250
    // const [value_index, exists_index] = op.AssetParams.assetClawback(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetClawback
    // tests/artifacts/state-ops/contract.algo.ts:251
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:252
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:253
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_creator(a: uint64) -> bytes:
verify_asset_params_get_creator:
    // tests/artifacts/state-ops/contract.algo.ts:256-257
    // @arc4.abimethod()
    // public verify_asset_params_get_creator(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:258
    // const [value, exists] = op.AssetParams.assetCreator(a)
    frame_dig -1
    asset_params_get AssetCreator
    // tests/artifacts/state-ops/contract.algo.ts:259
    // const [value_index, exists_index] = op.AssetParams.assetCreator(get_1st_ref_index())
    callsub get_1st_ref_index
    asset_params_get AssetCreator
    // tests/artifacts/state-ops/contract.algo.ts:260
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:261
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:262
    // return new Address(value)
    retsub
