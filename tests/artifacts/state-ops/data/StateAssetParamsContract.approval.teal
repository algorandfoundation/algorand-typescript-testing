#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@17
    pushbytess 0xad719a6f 0x1d603013 0x9fb731cd 0x0f5a4911 0xf5b370c6 0xc7d6af74 0x6b71a263 0x3040ebc8 0x1d07e844 0x3e40cb50 0x340c786b 0xe38a9815 // method "verify_asset_params_get_total(asset)uint64", method "verify_asset_params_get_decimals(asset)uint64", method "verify_asset_params_get_default_frozen(asset)bool", method "verify_asset_params_get_unit_name(asset)byte[]", method "verify_asset_params_get_name(asset)byte[]", method "verify_asset_params_get_url(asset)byte[]", method "verify_asset_params_get_metadata_hash(asset)byte[]", method "verify_asset_params_get_manager(asset)address", method "verify_asset_params_get_reserve(asset)address", method "verify_asset_params_get_freeze(asset)address", method "verify_asset_params_get_clawback(asset)address", method "verify_asset_params_get_creator(asset)address"
    txna ApplicationArgs 0
    match main_verify_asset_params_get_total_route@3 main_verify_asset_params_get_decimals_route@4 main_verify_asset_params_get_default_frozen_route@5 main_verify_asset_params_get_unit_name_route@6 main_verify_asset_params_get_name_route@7 main_verify_asset_params_get_url_route@8 main_verify_asset_params_get_metadata_hash_route@9 main_verify_asset_params_get_manager_route@10 main_verify_asset_params_get_reserve_route@11 main_verify_asset_params_get_freeze_route@12 main_verify_asset_params_get_clawback_route@13 main_verify_asset_params_get_creator_route@14

main_after_if_else@21:
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    intc_1 // 0
    return

main_verify_asset_params_get_creator_route@14:
    // tests/artifacts/state-ops/contract.algo.ts:263
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:263
    // @arc4.abimethod()
    callsub verify_asset_params_get_creator
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_clawback_route@13:
    // tests/artifacts/state-ops/contract.algo.ts:254
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:254
    // @arc4.abimethod()
    callsub verify_asset_params_get_clawback
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_freeze_route@12:
    // tests/artifacts/state-ops/contract.algo.ts:245
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:245
    // @arc4.abimethod()
    callsub verify_asset_params_get_freeze
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_reserve_route@11:
    // tests/artifacts/state-ops/contract.algo.ts:236
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:236
    // @arc4.abimethod()
    callsub verify_asset_params_get_reserve
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_manager_route@10:
    // tests/artifacts/state-ops/contract.algo.ts:227
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:227
    // @arc4.abimethod()
    callsub verify_asset_params_get_manager
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_metadata_hash_route@9:
    // tests/artifacts/state-ops/contract.algo.ts:218
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:218
    // @arc4.abimethod()
    callsub verify_asset_params_get_metadata_hash
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_url_route@8:
    // tests/artifacts/state-ops/contract.algo.ts:209
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:209
    // @arc4.abimethod()
    callsub verify_asset_params_get_url
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_name_route@7:
    // tests/artifacts/state-ops/contract.algo.ts:200
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:200
    // @arc4.abimethod()
    callsub verify_asset_params_get_name
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_unit_name_route@6:
    // tests/artifacts/state-ops/contract.algo.ts:191
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:191
    // @arc4.abimethod()
    callsub verify_asset_params_get_unit_name
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_default_frozen_route@5:
    // tests/artifacts/state-ops/contract.algo.ts:182
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:182
    // @arc4.abimethod()
    callsub verify_asset_params_get_default_frozen
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_decimals_route@4:
    // tests/artifacts/state-ops/contract.algo.ts:173
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:173
    // @arc4.abimethod()
    callsub verify_asset_params_get_decimals
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_asset_params_get_total_route@3:
    // tests/artifacts/state-ops/contract.algo.ts:164
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // tests/artifacts/state-ops/contract.algo.ts:164
    // @arc4.abimethod()
    callsub verify_asset_params_get_total
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@17:
    // tests/artifacts/state-ops/contract.algo.ts:163
    // export class StateAssetParamsContract extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@21
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_total(a: uint64) -> uint64:
verify_asset_params_get_total:
    // tests/artifacts/state-ops/contract.algo.ts:164-165
    // @arc4.abimethod()
    // public verify_asset_params_get_total(a: Asset): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:166
    // const [value, exists] = op.AssetParams.assetTotal(a)
    frame_dig -1
    asset_params_get AssetTotal
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:167
    // const [value_index, exists_index] = op.AssetParams.assetTotal(get_1st_ref_index())
    asset_params_get AssetTotal
    // tests/artifacts/state-ops/contract.algo.ts:168
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:169
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:170
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_decimals(a: uint64) -> uint64:
verify_asset_params_get_decimals:
    // tests/artifacts/state-ops/contract.algo.ts:173-174
    // @arc4.abimethod()
    // public verify_asset_params_get_decimals(a: Asset): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:175
    // const [value, exists] = op.AssetParams.assetDecimals(a)
    frame_dig -1
    asset_params_get AssetDecimals
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:176
    // const [value_index, exists_index] = op.AssetParams.assetDecimals(get_1st_ref_index())
    asset_params_get AssetDecimals
    // tests/artifacts/state-ops/contract.algo.ts:177
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:178
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:179
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_default_frozen(a: uint64) -> uint64:
verify_asset_params_get_default_frozen:
    // tests/artifacts/state-ops/contract.algo.ts:182-183
    // @arc4.abimethod()
    // public verify_asset_params_get_default_frozen(a: Asset): boolean {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:184
    // const [value, exists] = op.AssetParams.assetDefaultFrozen(a)
    frame_dig -1
    asset_params_get AssetDefaultFrozen
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:185
    // const [value_index, exists_index] = op.AssetParams.assetDefaultFrozen(get_1st_ref_index())
    asset_params_get AssetDefaultFrozen
    // tests/artifacts/state-ops/contract.algo.ts:186
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:187
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:188
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_unit_name(a: uint64) -> bytes:
verify_asset_params_get_unit_name:
    // tests/artifacts/state-ops/contract.algo.ts:191-192
    // @arc4.abimethod()
    // public verify_asset_params_get_unit_name(a: Asset): bytes {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:193
    // const [value, exists] = op.AssetParams.assetUnitName(a)
    frame_dig -1
    asset_params_get AssetUnitName
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:194
    // const [value_index, exists_index] = op.AssetParams.assetUnitName(get_1st_ref_index())
    asset_params_get AssetUnitName
    // tests/artifacts/state-ops/contract.algo.ts:195
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:196
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:197
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_name(a: uint64) -> bytes:
verify_asset_params_get_name:
    // tests/artifacts/state-ops/contract.algo.ts:200-201
    // @arc4.abimethod()
    // public verify_asset_params_get_name(a: Asset): bytes {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:202
    // const [value, exists] = op.AssetParams.assetName(a)
    frame_dig -1
    asset_params_get AssetName
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:203
    // const [value_index, exists_index] = op.AssetParams.assetName(get_1st_ref_index())
    asset_params_get AssetName
    // tests/artifacts/state-ops/contract.algo.ts:204
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:205
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:206
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_url(a: uint64) -> bytes:
verify_asset_params_get_url:
    // tests/artifacts/state-ops/contract.algo.ts:209-210
    // @arc4.abimethod()
    // public verify_asset_params_get_url(a: Asset): bytes {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:211
    // const [value, exists] = op.AssetParams.assetUrl(a)
    frame_dig -1
    asset_params_get AssetURL
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:212
    // const [value_index, exists_index] = op.AssetParams.assetUrl(get_1st_ref_index())
    asset_params_get AssetURL
    // tests/artifacts/state-ops/contract.algo.ts:213
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:214
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:215
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_metadata_hash(a: uint64) -> bytes:
verify_asset_params_get_metadata_hash:
    // tests/artifacts/state-ops/contract.algo.ts:218-219
    // @arc4.abimethod()
    // public verify_asset_params_get_metadata_hash(a: Asset): bytes {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:220
    // const [value, exists] = op.AssetParams.assetMetadataHash(a)
    frame_dig -1
    asset_params_get AssetMetadataHash
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:221
    // const [value_index, exists_index] = op.AssetParams.assetMetadataHash(get_1st_ref_index())
    asset_params_get AssetMetadataHash
    // tests/artifacts/state-ops/contract.algo.ts:222
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:223
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:224
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_manager(a: uint64) -> bytes:
verify_asset_params_get_manager:
    // tests/artifacts/state-ops/contract.algo.ts:227-228
    // @arc4.abimethod()
    // public verify_asset_params_get_manager(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:229
    // const [value, exists] = op.AssetParams.assetManager(a)
    frame_dig -1
    asset_params_get AssetManager
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:230
    // const [value_index, exists_index] = op.AssetParams.assetManager(get_1st_ref_index())
    asset_params_get AssetManager
    // tests/artifacts/state-ops/contract.algo.ts:231
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:232
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:233
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_reserve(a: uint64) -> bytes:
verify_asset_params_get_reserve:
    // tests/artifacts/state-ops/contract.algo.ts:236-237
    // @arc4.abimethod()
    // public verify_asset_params_get_reserve(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:238
    // const [value, exists] = op.AssetParams.assetReserve(a)
    frame_dig -1
    asset_params_get AssetReserve
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:239
    // const [value_index, exists_index] = op.AssetParams.assetReserve(get_1st_ref_index())
    asset_params_get AssetReserve
    // tests/artifacts/state-ops/contract.algo.ts:240
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:241
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:242
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_freeze(a: uint64) -> bytes:
verify_asset_params_get_freeze:
    // tests/artifacts/state-ops/contract.algo.ts:245-246
    // @arc4.abimethod()
    // public verify_asset_params_get_freeze(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:247
    // const [value, exists] = op.AssetParams.assetFreeze(a)
    frame_dig -1
    asset_params_get AssetFreeze
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:248
    // const [value_index, exists_index] = op.AssetParams.assetFreeze(get_1st_ref_index())
    asset_params_get AssetFreeze
    // tests/artifacts/state-ops/contract.algo.ts:249
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:250
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:251
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_clawback(a: uint64) -> bytes:
verify_asset_params_get_clawback:
    // tests/artifacts/state-ops/contract.algo.ts:254-255
    // @arc4.abimethod()
    // public verify_asset_params_get_clawback(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:256
    // const [value, exists] = op.AssetParams.assetClawback(a)
    frame_dig -1
    asset_params_get AssetClawback
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:257
    // const [value_index, exists_index] = op.AssetParams.assetClawback(get_1st_ref_index())
    asset_params_get AssetClawback
    // tests/artifacts/state-ops/contract.algo.ts:258
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:259
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:260
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAssetParamsContract.verify_asset_params_get_creator(a: uint64) -> bytes:
verify_asset_params_get_creator:
    // tests/artifacts/state-ops/contract.algo.ts:263-264
    // @arc4.abimethod()
    // public verify_asset_params_get_creator(a: Asset): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:265
    // const [value, exists] = op.AssetParams.assetCreator(a)
    frame_dig -1
    asset_params_get AssetCreator
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:266
    // const [value_index, exists_index] = op.AssetParams.assetCreator(get_1st_ref_index())
    asset_params_get AssetCreator
    // tests/artifacts/state-ops/contract.algo.ts:267
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:268
    // assert(exists === exists_index, 'expected exists by index to match')
    ==
    assert // expected exists by index to match
    // tests/artifacts/state-ops/contract.algo.ts:269
    // return new Address(value)
    retsub
