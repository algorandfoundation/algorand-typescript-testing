#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    bytecblock 0x151f7c75
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@18
    pushbytess 0x5f5b43e4 0x73dc93c7 0x5626dfeb 0xdc8a25bf 0x198ebd8c 0x2301ab26 0x9f68fca6 0xa975c2d1 0xd1e04801 0xb6966be5 0x195d5418 0x6adae3f1 0xdf8cfee5 // method "verify_acct_balance(account)uint64", method "verify_acct_min_balance(account)uint64", method "verify_acct_auth_addr(account)address", method "verify_acct_total_num_uint(account)uint64", method "verify_acct_total_num_byte_slice(account)uint64", method "verify_acct_total_extra_app_pages(account)uint64", method "verify_acct_total_apps_created(account)uint64", method "verify_acct_total_apps_opted_in(account)uint64", method "verify_acct_total_assets_created(account)uint64", method "verify_acct_total_assets(account)uint64", method "verify_acct_total_boxes(account)uint64", method "verify_acct_total_box_bytes(account)uint64", method "verify_acct_incentive_eligible(account)bool"
    txna ApplicationArgs 0
    match main_verify_acct_balance_route@3 main_verify_acct_min_balance_route@4 main_verify_acct_auth_addr_route@5 main_verify_acct_total_num_uint_route@6 main_verify_acct_total_num_byte_slice_route@7 main_verify_acct_total_extra_app_pages_route@8 main_verify_acct_total_apps_created_route@9 main_verify_acct_total_apps_opted_in_route@10 main_verify_acct_total_assets_created_route@11 main_verify_acct_total_assets_route@12 main_verify_acct_total_boxes_route@13 main_verify_acct_total_box_bytes_route@14 main_verify_acct_incentive_eligible_route@15

main_after_if_else@22:
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    intc_1 // 0
    return

main_verify_acct_incentive_eligible_route@15:
    // tests/artifacts/state-ops/contract.algo.ts:139
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:139
    // @arc4.abimethod()
    callsub verify_acct_incentive_eligible
    pushbytes 0x00
    intc_1 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_box_bytes_route@14:
    // tests/artifacts/state-ops/contract.algo.ts:130
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:130
    // @arc4.abimethod()
    callsub verify_acct_total_box_bytes
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_boxes_route@13:
    // tests/artifacts/state-ops/contract.algo.ts:121
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:121
    // @arc4.abimethod()
    callsub verify_acct_total_boxes
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_assets_route@12:
    // tests/artifacts/state-ops/contract.algo.ts:112
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:112
    // @arc4.abimethod()
    callsub verify_acct_total_assets
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_assets_created_route@11:
    // tests/artifacts/state-ops/contract.algo.ts:103
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:103
    // @arc4.abimethod()
    callsub verify_acct_total_assets_created
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_apps_opted_in_route@10:
    // tests/artifacts/state-ops/contract.algo.ts:94
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:94
    // @arc4.abimethod()
    callsub verify_acct_total_apps_opted_in
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_apps_created_route@9:
    // tests/artifacts/state-ops/contract.algo.ts:85
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:85
    // @arc4.abimethod()
    callsub verify_acct_total_apps_created
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_extra_app_pages_route@8:
    // tests/artifacts/state-ops/contract.algo.ts:76
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:76
    // @arc4.abimethod()
    callsub verify_acct_total_extra_app_pages
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_num_byte_slice_route@7:
    // tests/artifacts/state-ops/contract.algo.ts:67
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:67
    // @arc4.abimethod()
    callsub verify_acct_total_num_byte_slice
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_total_num_uint_route@6:
    // tests/artifacts/state-ops/contract.algo.ts:58
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:58
    // @arc4.abimethod()
    callsub verify_acct_total_num_uint
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_auth_addr_route@5:
    // tests/artifacts/state-ops/contract.algo.ts:49
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:49
    // @arc4.abimethod()
    callsub verify_acct_auth_addr
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_min_balance_route@4:
    // tests/artifacts/state-ops/contract.algo.ts:37
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:37
    // @arc4.abimethod()
    callsub verify_acct_min_balance
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_verify_acct_balance_route@3:
    // tests/artifacts/state-ops/contract.algo.ts:25
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // tests/artifacts/state-ops/contract.algo.ts:25
    // @arc4.abimethod()
    callsub verify_acct_balance
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@18:
    // tests/artifacts/state-ops/contract.algo.ts:23-24
    // @contract({ name: 'StateAcctParamsGetContract', avmVersion: 11 })
    // export class StateAcctParamsGetContract extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@22
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_balance(a: bytes) -> uint64:
verify_acct_balance:
    // tests/artifacts/state-ops/contract.algo.ts:25-26
    // @arc4.abimethod()
    // public verify_acct_balance(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:27
    // const [value, funded] = op.AcctParams.acctBalance(a)
    frame_dig -1
    acct_params_get AcctBalance
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:28
    // const [value_index, funded_index] = op.AcctParams.acctBalance(get_1st_ref_index())
    dup
    acct_params_get AcctBalance
    // tests/artifacts/state-ops/contract.algo.ts:29
    // assert(value === value_index, 'expected value by index to match')
    dig 4
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:30
    // assert(funded === funded_index, 'expected funded by index to match')
    uncover 2
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:31
    // assert(value === a.balance, 'expected Account balance to match')
    frame_dig -1
    acct_params_get AcctBalance
    assert // account funded
    dig 2
    ==
    assert // expected Account balance to match
    // tests/artifacts/state-ops/contract.algo.ts:32
    // assert(value === op.balance(a), 'expected op.balance to match')
    frame_dig -1
    balance
    dig 2
    ==
    assert // expected op.balance to match
    // tests/artifacts/state-ops/contract.algo.ts:33
    // assert(value === op.balance(get_1st_ref_index()), 'expected op.balance by index to match')
    balance
    dig 1
    ==
    assert // expected op.balance by index to match
    // tests/artifacts/state-ops/contract.algo.ts:34
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_min_balance(a: bytes) -> uint64:
verify_acct_min_balance:
    // tests/artifacts/state-ops/contract.algo.ts:37-38
    // @arc4.abimethod()
    // public verify_acct_min_balance(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:39
    // const [value, funded] = op.AcctParams.acctMinBalance(a)
    frame_dig -1
    acct_params_get AcctMinBalance
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:40
    // const [value_index, funded_index] = op.AcctParams.acctMinBalance(get_1st_ref_index())
    dup
    acct_params_get AcctMinBalance
    // tests/artifacts/state-ops/contract.algo.ts:41
    // assert(value === value_index, 'expected value by index to match')
    dig 4
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:42
    // assert(funded === funded_index, 'expected funded by index to match')
    uncover 2
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:43
    // assert(value === a.minBalance, 'expected Account min_balance to match')
    frame_dig -1
    acct_params_get AcctMinBalance
    assert // account funded
    dig 2
    ==
    assert // expected Account min_balance to match
    // tests/artifacts/state-ops/contract.algo.ts:44
    // assert(value === op.minBalance(a), 'expected op.min_balance to match')
    frame_dig -1
    min_balance
    dig 2
    ==
    assert // expected op.min_balance to match
    // tests/artifacts/state-ops/contract.algo.ts:45
    // assert(value === op.minBalance(get_1st_ref_index()), 'expected op.min_balance by index to match')
    min_balance
    dig 1
    ==
    assert // expected op.min_balance by index to match
    // tests/artifacts/state-ops/contract.algo.ts:46
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_auth_addr(a: bytes) -> bytes:
verify_acct_auth_addr:
    // tests/artifacts/state-ops/contract.algo.ts:49-50
    // @arc4.abimethod()
    // public verify_acct_auth_addr(a: Account): Address {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:51
    // const [value, funded] = op.AcctParams.acctAuthAddr(a)
    frame_dig -1
    acct_params_get AcctAuthAddr
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:52
    // const [value_index, funded_index] = op.AcctParams.acctAuthAddr(get_1st_ref_index())
    acct_params_get AcctAuthAddr
    // tests/artifacts/state-ops/contract.algo.ts:53
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:54
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:55
    // return new Address(value)
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_num_uint(a: bytes) -> uint64:
verify_acct_total_num_uint:
    // tests/artifacts/state-ops/contract.algo.ts:58-59
    // @arc4.abimethod()
    // public verify_acct_total_num_uint(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:60
    // const [value, funded] = op.AcctParams.acctTotalNumUint(a)
    frame_dig -1
    acct_params_get AcctTotalNumUint
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:61
    // const [value_index, funded_index] = op.AcctParams.acctTotalNumUint(get_1st_ref_index())
    acct_params_get AcctTotalNumUint
    // tests/artifacts/state-ops/contract.algo.ts:62
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:63
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:64
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_num_byte_slice(a: bytes) -> uint64:
verify_acct_total_num_byte_slice:
    // tests/artifacts/state-ops/contract.algo.ts:67-68
    // @arc4.abimethod()
    // public verify_acct_total_num_byte_slice(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:69
    // const [value, funded] = op.AcctParams.acctTotalNumByteSlice(a)
    frame_dig -1
    acct_params_get AcctTotalNumByteSlice
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:70
    // const [value_index, funded_index] = op.AcctParams.acctTotalNumByteSlice(get_1st_ref_index())
    acct_params_get AcctTotalNumByteSlice
    // tests/artifacts/state-ops/contract.algo.ts:71
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:72
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:73
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_extra_app_pages(a: bytes) -> uint64:
verify_acct_total_extra_app_pages:
    // tests/artifacts/state-ops/contract.algo.ts:76-77
    // @arc4.abimethod()
    // public verify_acct_total_extra_app_pages(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:78
    // const [value, funded] = op.AcctParams.acctTotalExtraAppPages(a)
    frame_dig -1
    acct_params_get AcctTotalExtraAppPages
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:79
    // const [value_index, funded_index] = op.AcctParams.acctTotalExtraAppPages(get_1st_ref_index())
    acct_params_get AcctTotalExtraAppPages
    // tests/artifacts/state-ops/contract.algo.ts:80
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:81
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:82
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_apps_created(a: bytes) -> uint64:
verify_acct_total_apps_created:
    // tests/artifacts/state-ops/contract.algo.ts:85-86
    // @arc4.abimethod()
    // public verify_acct_total_apps_created(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:87
    // const [value, funded] = op.AcctParams.acctTotalAppsCreated(a)
    frame_dig -1
    acct_params_get AcctTotalAppsCreated
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:88
    // const [value_index, funded_index] = op.AcctParams.acctTotalAppsCreated(get_1st_ref_index())
    acct_params_get AcctTotalAppsCreated
    // tests/artifacts/state-ops/contract.algo.ts:89
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:90
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:91
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_apps_opted_in(a: bytes) -> uint64:
verify_acct_total_apps_opted_in:
    // tests/artifacts/state-ops/contract.algo.ts:94-95
    // @arc4.abimethod()
    // public verify_acct_total_apps_opted_in(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:96
    // const [value, funded] = op.AcctParams.acctTotalAppsOptedIn(a)
    frame_dig -1
    acct_params_get AcctTotalAppsOptedIn
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:97
    // const [value_index, funded_index] = op.AcctParams.acctTotalAppsOptedIn(get_1st_ref_index())
    acct_params_get AcctTotalAppsOptedIn
    // tests/artifacts/state-ops/contract.algo.ts:98
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:99
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:100
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_assets_created(a: bytes) -> uint64:
verify_acct_total_assets_created:
    // tests/artifacts/state-ops/contract.algo.ts:103-104
    // @arc4.abimethod()
    // public verify_acct_total_assets_created(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:105
    // const [value, funded] = op.AcctParams.acctTotalAssetsCreated(a)
    frame_dig -1
    acct_params_get AcctTotalAssetsCreated
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:106
    // const [value_index, funded_index] = op.AcctParams.acctTotalAssetsCreated(get_1st_ref_index())
    acct_params_get AcctTotalAssetsCreated
    // tests/artifacts/state-ops/contract.algo.ts:107
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:108
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:109
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_assets(a: bytes) -> uint64:
verify_acct_total_assets:
    // tests/artifacts/state-ops/contract.algo.ts:112-113
    // @arc4.abimethod()
    // public verify_acct_total_assets(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:114
    // const [value, funded] = op.AcctParams.acctTotalAssets(a)
    frame_dig -1
    acct_params_get AcctTotalAssets
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:115
    // const [value_index, funded_index] = op.AcctParams.acctTotalAssets(get_1st_ref_index())
    acct_params_get AcctTotalAssets
    // tests/artifacts/state-ops/contract.algo.ts:116
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:117
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:118
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_boxes(a: bytes) -> uint64:
verify_acct_total_boxes:
    // tests/artifacts/state-ops/contract.algo.ts:121-122
    // @arc4.abimethod()
    // public verify_acct_total_boxes(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:123
    // const [value, funded] = op.AcctParams.acctTotalBoxes(a)
    frame_dig -1
    acct_params_get AcctTotalBoxes
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:124
    // const [value_index, funded_index] = op.AcctParams.acctTotalBoxes(get_1st_ref_index())
    acct_params_get AcctTotalBoxes
    // tests/artifacts/state-ops/contract.algo.ts:125
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:126
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:127
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_total_box_bytes(a: bytes) -> uint64:
verify_acct_total_box_bytes:
    // tests/artifacts/state-ops/contract.algo.ts:130-131
    // @arc4.abimethod()
    // public verify_acct_total_box_bytes(a: Account): uint64 {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:132
    // const [value, funded] = op.AcctParams.acctTotalBoxBytes(a)
    frame_dig -1
    acct_params_get AcctTotalBoxBytes
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:133
    // const [value_index, funded_index] = op.AcctParams.acctTotalBoxBytes(get_1st_ref_index())
    acct_params_get AcctTotalBoxBytes
    // tests/artifacts/state-ops/contract.algo.ts:134
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:135
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:136
    // return value
    retsub


// tests/artifacts/state-ops/contract.algo.ts::StateAcctParamsGetContract.verify_acct_incentive_eligible(a: bytes) -> uint64:
verify_acct_incentive_eligible:
    // tests/artifacts/state-ops/contract.algo.ts:139-140
    // @arc4.abimethod()
    // public verify_acct_incentive_eligible(a: Account): boolean {
    proto 1 1
    // tests/artifacts/state-ops/contract.algo.ts:141
    // const [value, funded] = op.AcctParams.acctIncentiveEligible(a)
    frame_dig -1
    acct_params_get AcctIncentiveEligible
    // tests/artifacts/state-ops/contract.algo.ts:20
    // return op.btoi(Txn.applicationArgs(1))
    intc_0 // 1
    txnas ApplicationArgs
    btoi
    // tests/artifacts/state-ops/contract.algo.ts:142
    // const [value_index, funded_index] = op.AcctParams.acctIncentiveEligible(get_1st_ref_index())
    acct_params_get AcctIncentiveEligible
    // tests/artifacts/state-ops/contract.algo.ts:143
    // assert(value === value_index, 'expected value by index to match')
    dig 3
    uncover 2
    ==
    assert // expected value by index to match
    // tests/artifacts/state-ops/contract.algo.ts:144
    // assert(funded === funded_index, 'expected funded by index to match')
    ==
    assert // expected funded by index to match
    // tests/artifacts/state-ops/contract.algo.ts:145
    // return value
    retsub
