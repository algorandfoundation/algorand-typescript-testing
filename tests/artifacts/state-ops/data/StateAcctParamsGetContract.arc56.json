{
    "name": "StateAcctParamsGetContract",
    "structs": {},
    "methods": [
        {
            "name": "verify_acct_balance",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_min_balance",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_auth_addr",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_num_uint",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_num_byte_slice",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_extra_app_pages",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_apps_created",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_apps_opted_in",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_assets_created",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_assets",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_boxes",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_acct_total_box_bytes",
            "args": [
                {
                    "type": "account",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        120,
                        143,
                        166,
                        188,
                        211,
                        234,
                        257,
                        280,
                        303,
                        326,
                        349,
                        372
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        429,
                        482
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        400
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        123,
                        146,
                        169,
                        191,
                        214,
                        237,
                        260,
                        283,
                        306,
                        329,
                        352,
                        375
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        433
                    ],
                    "errorMessage": "expected Account balance to match"
                },
                {
                    "pc": [
                        486
                    ],
                    "errorMessage": "expected Account min_balance to match"
                },
                {
                    "pc": [
                        424,
                        477,
                        522,
                        543,
                        564,
                        585,
                        606,
                        627,
                        648,
                        669,
                        690,
                        711
                    ],
                    "errorMessage": "expected funded by index to match"
                },
                {
                    "pc": [
                        448
                    ],
                    "errorMessage": "expected op.balance by index to match"
                },
                {
                    "pc": [
                        440
                    ],
                    "errorMessage": "expected op.balance to match"
                },
                {
                    "pc": [
                        501
                    ],
                    "errorMessage": "expected op.min_balance by index to match"
                },
                {
                    "pc": [
                        493
                    ],
                    "errorMessage": "expected op.min_balance to match"
                },
                {
                    "pc": [
                        422,
                        475,
                        520,
                        541,
                        562,
                        583,
                        604,
                        625,
                        646,
                        667,
                        688,
                        709
                    ],
                    "errorMessage": "expected value by index to match"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0cy9hcnRpZmFjdHMvc3RhdGUtb3BzL2NvbnRyYWN0LmFsZ28udHM6OlN0YXRlQWNjdFBhcmFtc0dldENvbnRyYWN0LmNsZWFyU3RhdGVQcm9ncmFtOgogICAgcHVzaGludCAxIC8vIDEKICAgIHJldHVybgo="
    },
    "events": [],
    "templateVariables": {}
}