#pragma version 10

tests/artifacts/state-ops/contract.algo.ts::ItxnDemoContract.approvalProgram:
    intcblock 0 3 1 1000
    bytecblock "name" "unit" 0x098101 "AST1" "AST2" "AST3" "3rd" "with args param set" "\t\xc2\x81\x01"
    txn ApplicationID
    bnz main_after_if_else@2
    callsub constructor

main_after_if_else@2:
    // tests/artifacts/state-ops/contract.algo.ts:501
    // if (Txn.numAppArgs) {
    txn NumAppArgs
    bz main_after_if_else@15
    // tests/artifacts/state-ops/contract.algo.ts:502
    // switch (Txn.applicationArgs(0)) {
    intc_0 // 0
    txnas ApplicationArgs
    // tests/artifacts/state-ops/contract.algo.ts:503
    // case Bytes('test1'):
    pushbytess "test1" "test2" "test3" "test4" // "test1", "test2", "test3", "test4"
    // tests/artifacts/state-ops/contract.algo.ts:502-512
    // switch (Txn.applicationArgs(0)) {
    //   case Bytes('test1'):
    //     this.test1()
    //     break
    //   case Bytes('test2'):
    //     this.test2()
    //     break
    //   case Bytes('test3'):
    //   case Bytes('test4'):
    //     break
    // }
    uncover 4
    match main_switch_case_0@4 main_switch_case_1@6 main_after_if_else@15 main_after_if_else@15
    // tests/artifacts/state-ops/contract.algo.ts:514
    // return true
    intc_2 // 1
    return

main_switch_case_0@4:
    // tests/artifacts/state-ops/contract.algo.ts:504
    // this.test1()
    callsub test1
    // tests/artifacts/state-ops/contract.algo.ts:505
    // break
    b main_after_if_else@15

main_switch_case_1@6:
    // tests/artifacts/state-ops/contract.algo.ts:507
    // this.test2()
    callsub test2

main_after_if_else@15:
    // tests/artifacts/state-ops/contract.algo.ts:514
    // return true
    intc_2 // 1
    return


// tests/artifacts/state-ops/contract.algo.ts::ItxnDemoContract.constructor() -> void:
constructor:
    // tests/artifacts/state-ops/contract.algo.ts:497
    // export class ItxnDemoContract extends BaseContract {
    proto 0 0
    // tests/artifacts/state-ops/contract.algo.ts:498
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    pushbytes 0x
    app_global_put
    retsub


// tests/artifacts/state-ops/contract.algo.ts::ItxnDemoContract.test1() -> void:
test1:
    // tests/artifacts/state-ops/contract.algo.ts:517
    // private test1() {
    proto 0 0
    // tests/artifacts/state-ops/contract.algo.ts:498
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    // tests/artifacts/state-ops/contract.algo.ts:518
    // this.name.value = Bytes('AST1')
    bytec_3 // "AST1"
    app_global_put
    // tests/artifacts/state-ops/contract.algo.ts:522
    // assetName: this.name.value,
    intc_0 // 0
    // tests/artifacts/state-ops/contract.algo.ts:498
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    // tests/artifacts/state-ops/contract.algo.ts:522
    // assetName: this.name.value,
    app_global_get_ex
    assert // check GlobalState exists
    // tests/artifacts/state-ops/contract.algo.ts:525
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // tests/artifacts/state-ops/contract.algo.ts:526
    // reserve: Global.currentApplicationAddress,
    dup
    // tests/artifacts/state-ops/contract.algo.ts:498
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    // tests/artifacts/state-ops/contract.algo.ts:529
    // this.name.value = Bytes('AST2')
    bytec 4 // "AST2"
    app_global_put
    // tests/artifacts/state-ops/contract.algo.ts:530
    // const asset1_txn = assetParams.submit()
    itxn_begin
    dup
    itxn_field ConfigAssetReserve
    dig 1
    itxn_field ConfigAssetManager
    // tests/artifacts/state-ops/contract.algo.ts:524
    // decimals: 3,
    intc_1 // 3
    itxn_field ConfigAssetDecimals
    // tests/artifacts/state-ops/contract.algo.ts:523
    // unitName: 'unit',
    bytec_1 // "unit"
    itxn_field ConfigAssetUnitName
    uncover 2
    itxn_field ConfigAssetName
    // tests/artifacts/state-ops/contract.algo.ts:521
    // total: 1000,
    intc_3 // 1000
    itxn_field ConfigAssetTotal
    // tests/artifacts/state-ops/contract.algo.ts:520-527
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_1 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/artifacts/state-ops/contract.algo.ts:530
    // const asset1_txn = assetParams.submit()
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    // tests/artifacts/state-ops/contract.algo.ts:532
    // assetName: this.name.value,
    intc_0 // 0
    // tests/artifacts/state-ops/contract.algo.ts:498
    // name = GlobalState({ initialValue: Bytes() })
    bytec_0 // "name"
    // tests/artifacts/state-ops/contract.algo.ts:532
    // assetName: this.name.value,
    app_global_get_ex
    assert // check GlobalState exists
    // tests/artifacts/state-ops/contract.algo.ts:534
    // const asset2_txn = assetParams.submit()
    itxn_begin
    dig 3
    itxn_field ConfigAssetReserve
    dig 4
    itxn_field ConfigAssetManager
    // tests/artifacts/state-ops/contract.algo.ts:524
    // decimals: 3,
    intc_1 // 3
    itxn_field ConfigAssetDecimals
    // tests/artifacts/state-ops/contract.algo.ts:523
    // unitName: 'unit',
    bytec_1 // "unit"
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // tests/artifacts/state-ops/contract.algo.ts:521
    // total: 1000,
    intc_3 // 1000
    itxn_field ConfigAssetTotal
    // tests/artifacts/state-ops/contract.algo.ts:520-527
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_1 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/artifacts/state-ops/contract.algo.ts:534
    // const asset2_txn = assetParams.submit()
    itxn_submit
    itxn ConfigAssetName
    itxn CreatedAssetID
    // tests/artifacts/state-ops/contract.algo.ts:536
    // assert(asset1_txn.assetName === Bytes('AST1'), 'asset1_txn is correct')
    uncover 3
    bytec_3 // "AST1"
    ==
    assert // asset1_txn is correct
    // tests/artifacts/state-ops/contract.algo.ts:537
    // assert(asset2_txn.assetName === Bytes('AST2'), 'asset2_txn is correct')
    swap
    bytec 4 // "AST2"
    ==
    assert // asset2_txn is correct
    // tests/artifacts/state-ops/contract.algo.ts:538
    // assert(asset1_txn.createdAsset.name === Bytes('AST1'), 'created asset 1 is correct')
    swap
    asset_params_get AssetName
    assert // asset exists
    bytec_3 // "AST1"
    ==
    assert // created asset 1 is correct
    // tests/artifacts/state-ops/contract.algo.ts:539
    // assert(asset2_txn.createdAsset.name === Bytes('AST2'), 'created asset 2 is correct')
    asset_params_get AssetName
    assert // asset exists
    bytec 4 // "AST2"
    ==
    assert // created asset 2 is correct
    // tests/artifacts/state-ops/contract.algo.ts:551
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_begin
    // tests/artifacts/state-ops/contract.algo.ts:543
    // clearStateProgram: Bytes.fromHex('098101'),
    bytec_2 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/artifacts/state-ops/contract.algo.ts:542
    // approvalProgram: Bytes.fromHex('098101'),
    bytec_2 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/artifacts/state-ops/contract.algo.ts:541-545
    // const appCreateParams = itxn.applicationCall({
    //   approvalProgram: Bytes.fromHex('098101'),
    //   clearStateProgram: Bytes.fromHex('098101'),
    //   fee: 0,
    // })
    pushint 6 // 6
    itxn_field TypeEnum
    // tests/artifacts/state-ops/contract.algo.ts:544
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // tests/artifacts/state-ops/contract.algo.ts:551
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_next
    dup
    itxn_field ConfigAssetReserve
    dig 1
    itxn_field ConfigAssetManager
    // tests/artifacts/state-ops/contract.algo.ts:524
    // decimals: 3,
    intc_1 // 3
    itxn_field ConfigAssetDecimals
    // tests/artifacts/state-ops/contract.algo.ts:523
    // unitName: 'unit',
    bytec_1 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/artifacts/state-ops/contract.algo.ts:548
    // assetName: 'AST3',
    bytec 5 // "AST3"
    itxn_field ConfigAssetName
    // tests/artifacts/state-ops/contract.algo.ts:521
    // total: 1000,
    intc_3 // 1000
    itxn_field ConfigAssetTotal
    // tests/artifacts/state-ops/contract.algo.ts:520-527
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_1 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/artifacts/state-ops/contract.algo.ts:551
    // const [appCreateTxn, asset3_txn] = itxn.submitGroup(appCreateParams, assetParams)
    itxn_submit
    itxn ConfigAssetName
    gitxn 0 ApplicationID
    // tests/artifacts/state-ops/contract.algo.ts:553
    // assert(appCreateTxn.appId, 'app is created')
    assert // app is created
    // tests/artifacts/state-ops/contract.algo.ts:554
    // assert(asset3_txn.assetName === Bytes('AST3'), 'asset3_txn is correct')
    bytec 5 // "AST3"
    ==
    assert // asset3_txn is correct
    // tests/artifacts/state-ops/contract.algo.ts:562
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_begin
    // tests/artifacts/state-ops/contract.algo.ts:557
    // note: '3rd',
    bytec 6 // "3rd"
    itxn_field Note
    // tests/artifacts/state-ops/contract.algo.ts:543
    // clearStateProgram: Bytes.fromHex('098101'),
    bytec_2 // 0x098101
    itxn_field ClearStateProgramPages
    // tests/artifacts/state-ops/contract.algo.ts:542
    // approvalProgram: Bytes.fromHex('098101'),
    bytec_2 // 0x098101
    itxn_field ApprovalProgramPages
    // tests/artifacts/state-ops/contract.algo.ts:541-545
    // const appCreateParams = itxn.applicationCall({
    //   approvalProgram: Bytes.fromHex('098101'),
    //   clearStateProgram: Bytes.fromHex('098101'),
    //   fee: 0,
    // })
    pushint 6 // 6
    itxn_field TypeEnum
    // tests/artifacts/state-ops/contract.algo.ts:544
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // tests/artifacts/state-ops/contract.algo.ts:562
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_next
    // tests/artifacts/state-ops/contract.algo.ts:560
    // note: '3rd',
    bytec 6 // "3rd"
    itxn_field Note
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // tests/artifacts/state-ops/contract.algo.ts:524
    // decimals: 3,
    intc_1 // 3
    itxn_field ConfigAssetDecimals
    // tests/artifacts/state-ops/contract.algo.ts:523
    // unitName: 'unit',
    bytec_1 // "unit"
    itxn_field ConfigAssetUnitName
    // tests/artifacts/state-ops/contract.algo.ts:548
    // assetName: 'AST3',
    bytec 5 // "AST3"
    itxn_field ConfigAssetName
    // tests/artifacts/state-ops/contract.algo.ts:521
    // total: 1000,
    intc_3 // 1000
    itxn_field ConfigAssetTotal
    // tests/artifacts/state-ops/contract.algo.ts:520-527
    // const assetParams = itxn.assetConfig({
    //   total: 1000,
    //   assetName: this.name.value,
    //   unitName: 'unit',
    //   decimals: 3,
    //   manager: Global.currentApplicationAddress,
    //   reserve: Global.currentApplicationAddress,
    // })
    intc_1 // 3
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/artifacts/state-ops/contract.algo.ts:562
    // itxn.submitGroup(appCreateParams, assetParams)
    itxn_submit
    retsub


// tests/artifacts/state-ops/contract.algo.ts::ItxnDemoContract.test2() -> void:
test2:
    // tests/artifacts/state-ops/contract.algo.ts:565
    // private test2() {
    proto 0 0
    intc_0 // 0
    dupn 2
    pushbytes ""
    dupn 2
    // tests/artifacts/state-ops/contract.algo.ts:567
    // if (Txn.numAppArgs) {
    txn NumAppArgs
    bz test2_else_body@2
    // tests/artifacts/state-ops/contract.algo.ts:568
    // const args = [Bytes('1'), Bytes('2')] as const
    pushbytes "1"
    frame_bury 0
    pushbytes "2"
    frame_bury 1
    // tests/artifacts/state-ops/contract.algo.ts:572
    // appArgs: args,
    pushint 2 // 2
    frame_bury 3
    // tests/artifacts/state-ops/contract.algo.ts:573
    // onCompletion: arc4.OnCompleteAction.NoOp,
    intc_0 // 0
    frame_bury 5
    intc_2 // 1
    frame_bury 4
    // tests/artifacts/state-ops/contract.algo.ts:574
    // note: 'with args param set',
    bytec 7 // "with args param set"
    b test2_after_if_else@3

test2_else_body@2:
    // tests/artifacts/state-ops/contract.algo.ts:580
    // appArgs: [Bytes('3'), '4', Bytes('5')],
    pushbytes "3"
    frame_bury 0
    pushbytes "4"
    frame_bury 1
    pushbytes "5"
    frame_bury 2
    intc_1 // 3
    frame_bury 3
    // tests/artifacts/state-ops/contract.algo.ts:581
    // note: 'no args param set',
    pushbytes "no args param set"
    // tests/artifacts/state-ops/contract.algo.ts:577
    // createAppParams = itxn.applicationCall({
    intc_0 // 0
    frame_bury 4

test2_after_if_else@3:
    // tests/artifacts/state-ops/contract.algo.ts:584
    // const createAppTxn = createAppParams.submit()
    itxn_begin
    itxn_field Note
    frame_dig 4
    intc_2 // 1
    >=
    bz test2_next_field@5
    frame_dig 5
    itxn_field OnCompletion

test2_next_field@5:
    frame_dig 0
    itxn_field ApplicationArgs
    frame_dig 1
    itxn_field ApplicationArgs
    frame_dig 3
    intc_1 // 3
    >=
    // tests/artifacts/state-ops/contract.algo.ts:584
    // const createAppTxn = createAppParams.submit()
    bz test2_next_field@7
    frame_dig 2
    itxn_field ApplicationArgs

test2_next_field@7:
    // tests/artifacts/state-ops/contract.algo.ts:496
    // const APPROVE = Bytes('\x09\x81\x01')
    bytec 8 // "\t\xc2\x81\x01"
    itxn_field ClearStateProgramPages
    bytec 8 // "\t\xc2\x81\x01"
    itxn_field ApprovalProgramPages
    // tests/artifacts/state-ops/contract.algo.ts:569-575
    // createAppParams = itxn.applicationCall({
    //   approvalProgram: APPROVE,
    //   clearStateProgram: APPROVE,
    //   appArgs: args,
    //   onCompletion: arc4.OnCompleteAction.NoOp,
    //   note: 'with args param set',
    // })
    pushint 6 // 6
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // tests/artifacts/state-ops/contract.algo.ts:584
    // const createAppTxn = createAppParams.submit()
    itxn_submit
    itxn Note
    // tests/artifacts/state-ops/contract.algo.ts:585
    // assert(createAppTxn.appArgs(0) === Bytes('1'), 'correct args used 1')
    itxna ApplicationArgs 0
    pushbytes "1"
    ==
    assert // correct args used 1
    // tests/artifacts/state-ops/contract.algo.ts:586
    // assert(createAppTxn.appArgs(1) === Bytes('2'), 'correct args used 2')
    itxna ApplicationArgs 1
    pushbytes "2"
    ==
    assert // correct args used 2
    // tests/artifacts/state-ops/contract.algo.ts:587
    // assert(createAppTxn.note === Bytes('with args param set'))
    bytec 7 // "with args param set"
    ==
    assert
    retsub
