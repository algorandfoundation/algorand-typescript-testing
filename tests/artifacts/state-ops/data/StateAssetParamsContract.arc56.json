{
    "name": "StateAssetParamsContract",
    "structs": {},
    "methods": [
        {
            "name": "verify_asset_params_get_total",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_decimals",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_default_frozen",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_unit_name",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_name",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_url",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_metadata_hash",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_manager",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_reserve",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_freeze",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_clawback",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_asset_params_get_creator",
            "args": [
                {
                    "type": "asset",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        113,
                        135,
                        157,
                        179,
                        201,
                        223,
                        253,
                        283,
                        313,
                        343,
                        372,
                        395
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        423
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        116,
                        138,
                        160,
                        182,
                        204,
                        226,
                        256,
                        286,
                        316,
                        346,
                        375,
                        398
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        446,
                        468,
                        490,
                        512,
                        534,
                        556,
                        578,
                        600,
                        622,
                        644,
                        666,
                        688
                    ],
                    "errorMessage": "expected exists by index to match"
                },
                {
                    "pc": [
                        444,
                        466,
                        488,
                        510,
                        532,
                        554,
                        576,
                        598,
                        620,
                        642,
                        664,
                        686
                    ],
                    "errorMessage": "expected value by index to match"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyACAQAmAQQVH3x1MRtBAY6CDAStcZpvBB1gMBMEn7cxzQQPWkkRBPWzcMYEx9avdARrcaJjBDBA68gEHQfoRAQ+QMtQBDQMeGsE44qYFTYaAI4MARwBBQDoAMoArACOAHAAWgBEAC4AGAACI0MxGRREMRhENhoBF8AwiAIeKExQsCJDMRkURDEYRDYaARfAMIgB8ihMULAiQzEZFEQxGEQ2GgEXwDCIAcYoTFCwIkMxGRREMRhENhoBF8AwiAGaKExQsCJDMRkURDEYRDYaARfAMIgBbihMULAiQzEZFEQxGEQ2GgEXwDCIAUJJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXwDCIAQ5JFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXwDCIANpJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXwDCIAKZJFRZXBgJMUChMULAiQzEZFEQxGEQ2GgEXwDCIAHKAAQAjTwJUKExQsCJDMRkURDEYRDYaARfAMIgAPxYoTFCwIkMxGRREMRhENhoBF8AwiAASFihMULAiQzEZQP7IMRgURCJDigEBi/9xACLAGhdxAEsDTwISRBJEiYoBAYv/cQEiwBoXcQFLA08CEkQSRImKAQGL/3ECIsAaF3ECSwNPAhJEEkSJigEBi/9xAyLAGhdxA0sDTwISRBJEiYoBAYv/cQQiwBoXcQRLA08CEkQSRImKAQGL/3EFIsAaF3EFSwNPAhJEEkSJigEBi/9xBiLAGhdxBksDTwISRBJEiYoBAYv/cQciwBoXcQdLA08CEkQSRImKAQGL/3EIIsAaF3EISwNPAhJEEkSJigEBi/9xCSLAGhdxCUsDTwISRBJEiYoBAYv/cQoiwBoXcQpLA08CEkQSRImKAQGL/3ELIsAaF3ELSwNPAhJEEkSJ",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 0,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}