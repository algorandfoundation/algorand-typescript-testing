{
    "name": "CryptoOpsContract",
    "structs": {},
    "methods": [
        {
            "name": "verify_sha256",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "pad_size"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_sha3_256",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "pad_size"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_keccak_256",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "pad_size"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_sha512_256",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "pad_size"
                }
            ],
            "returns": {
                "type": "byte[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_ed25519verify",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_ed25519verify_bare",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_ecdsa_verify_k1",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                },
                {
                    "type": "byte[]",
                    "name": "e"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_ecdsa_verify_r1",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                },
                {
                    "type": "byte[]",
                    "name": "e"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_ecdsa_recover_k1",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                }
            ],
            "returns": {
                "type": "(byte[],byte[])"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_ecdsa_recover_r1",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "uint64",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "c"
                },
                {
                    "type": "byte[]",
                    "name": "d"
                }
            ],
            "returns": {
                "type": "(byte[],byte[])"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_ecdsa_decompress_k1",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "(byte[],byte[])"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_ecdsa_decompress_r1",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                }
            ],
            "returns": {
                "type": "(byte[],byte[])"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "verify_vrf_verify",
            "args": [
                {
                    "type": "byte[]",
                    "name": "a"
                },
                {
                    "type": "byte[]",
                    "name": "b"
                },
                {
                    "type": "byte[]",
                    "name": "c"
                }
            ],
            "returns": {
                "type": "(byte[],bool)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        139,
                        173,
                        207,
                        241,
                        275,
                        309,
                        343,
                        394,
                        445,
                        520,
                        595,
                        654,
                        713
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        775
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        142,
                        176,
                        210,
                        244,
                        278,
                        312,
                        346,
                        397,
                        448,
                        523,
                        598,
                        657,
                        716
                    ],
                    "errorMessage": "can only call when not creating"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0cy9hcnRpZmFjdHMvY3J5cHRvLW9wcy9jb250cmFjdC5hbGdvLnRzOjpDcnlwdG9PcHNDb250cmFjdC5jbGVhclN0YXRlUHJvZ3JhbToKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "events": [],
    "templateVariables": {}
}