#pragma version 10

tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.approvalProgram:
    intcblock 0 1 4 3000
    bytecblock 0x151f7c75 0x00 0x0004 0x068101
    callsub __puya_arc4_router__
    return


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@17
    pushbytess 0x3456c4c3 0xe8442b84 0x65f567aa 0x258455b1 0x35af0f38 0x6582c997 0x6298ffbb 0x3885b54f 0x2164e0bf 0x755b79a5 0xf06bb077 0x133f8ccc 0x2f7c68a9 // method "verify_sha256(byte[],uint64)byte[]", method "verify_sha3_256(byte[],uint64)byte[]", method "verify_keccak_256(byte[],uint64)byte[]", method "verify_sha512_256(byte[],uint64)byte[]", method "verify_ed25519verify(byte[],byte[],byte[])bool", method "verify_ed25519verify_bare(byte[],byte[],byte[])bool", method "verify_ecdsa_verify_k1(byte[],byte[],byte[],byte[],byte[])bool", method "verify_ecdsa_verify_r1(byte[],byte[],byte[],byte[],byte[])bool", method "verify_ecdsa_recover_k1(byte[],uint64,byte[],byte[])(byte[],byte[])", method "verify_ecdsa_recover_r1(byte[],uint64,byte[],byte[])(byte[],byte[])", method "verify_ecdsa_decompress_k1(byte[])(byte[],byte[])", method "verify_ecdsa_decompress_r1(byte[])(byte[],byte[])", method "verify_vrf_verify(byte[],byte[],byte[])(byte[],bool)"
    txna ApplicationArgs 0
    match __puya_arc4_router___verify_sha256_route@2 __puya_arc4_router___verify_sha3_256_route@3 __puya_arc4_router___verify_keccak_256_route@4 __puya_arc4_router___verify_sha512_256_route@5 __puya_arc4_router___verify_ed25519verify_route@6 __puya_arc4_router___verify_ed25519verify_bare_route@7 __puya_arc4_router___verify_ecdsa_verify_k1_route@8 __puya_arc4_router___verify_ecdsa_verify_r1_route@9 __puya_arc4_router___verify_ecdsa_recover_k1_route@10 __puya_arc4_router___verify_ecdsa_recover_r1_route@11 __puya_arc4_router___verify_ecdsa_decompress_k1_route@12 __puya_arc4_router___verify_ecdsa_decompress_r1_route@13 __puya_arc4_router___verify_vrf_verify_route@14
    intc_0 // 0
    retsub

__puya_arc4_router___verify_sha256_route@2:
    // tests/artifacts/crypto-ops/contract.algo.ts:4
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/crypto-ops/contract.algo.ts:4
    // @arc4.abimethod()
    callsub verify_sha256
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_sha3_256_route@3:
    // tests/artifacts/crypto-ops/contract.algo.ts:11
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/crypto-ops/contract.algo.ts:11
    // @arc4.abimethod()
    callsub verify_sha3_256
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_keccak_256_route@4:
    // tests/artifacts/crypto-ops/contract.algo.ts:18
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/crypto-ops/contract.algo.ts:18
    // @arc4.abimethod()
    callsub verify_keccak_256
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_sha512_256_route@5:
    // tests/artifacts/crypto-ops/contract.algo.ts:25
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    // tests/artifacts/crypto-ops/contract.algo.ts:25
    // @arc4.abimethod()
    callsub verify_sha512_256
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_ed25519verify_route@6:
    // tests/artifacts/crypto-ops/contract.algo.ts:33
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:33
    // @arc4.abimethod()
    callsub verify_ed25519verify
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_ed25519verify_bare_route@7:
    // tests/artifacts/crypto-ops/contract.algo.ts:41
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:41
    // @arc4.abimethod()
    callsub verify_ed25519verify_bare
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_ecdsa_verify_k1_route@8:
    // tests/artifacts/crypto-ops/contract.algo.ts:48
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:48
    // @arc4.abimethod()
    callsub verify_ecdsa_verify_k1
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_ecdsa_verify_r1_route@9:
    // tests/artifacts/crypto-ops/contract.algo.ts:55
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:55
    // @arc4.abimethod()
    callsub verify_ecdsa_verify_r1
    bytec_1 // 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_ecdsa_recover_k1_route@10:
    // tests/artifacts/crypto-ops/contract.algo.ts:62
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:62
    // @arc4.abimethod()
    callsub verify_ecdsa_recover_k1
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 1
    len
    intc_2 // 4
    +
    itob
    extract 6 2
    bytec_2 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_ecdsa_recover_r1_route@11:
    // tests/artifacts/crypto-ops/contract.algo.ts:68
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:68
    // @arc4.abimethod()
    callsub verify_ecdsa_recover_r1
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 1
    len
    intc_2 // 4
    +
    itob
    extract 6 2
    bytec_2 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_ecdsa_decompress_k1_route@12:
    // tests/artifacts/crypto-ops/contract.algo.ts:77
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:77
    // @arc4.abimethod()
    callsub verify_ecdsa_decompress_k1
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 1
    len
    intc_2 // 4
    +
    itob
    extract 6 2
    bytec_2 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_ecdsa_decompress_r1_route@13:
    // tests/artifacts/crypto-ops/contract.algo.ts:83
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:83
    // @arc4.abimethod()
    callsub verify_ecdsa_decompress_r1
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    dig 1
    len
    intc_2 // 4
    +
    itob
    extract 6 2
    bytec_2 // 0x0004
    swap
    concat
    uncover 2
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___verify_vrf_verify_route@14:
    // tests/artifacts/crypto-ops/contract.algo.ts:89
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    // tests/artifacts/crypto-ops/contract.algo.ts:89
    // @arc4.abimethod()
    callsub verify_vrf_verify
    dig 1
    len
    itob
    extract 6 2
    uncover 2
    concat
    bytec_1 // 0x00
    intc_0 // 0
    uncover 3
    setbit
    pushbytes 0x0003
    swap
    concat
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    retsub

__puya_arc4_router___bare_routing@17:
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@21
    txn ApplicationID
    !
    assert // is creating
    intc_1 // 1
    retsub

__puya_arc4_router___after_if_else@21:
    // tests/artifacts/crypto-ops/contract.algo.ts:3
    // export class CryptoOpsContract extends arc4.Contract {
    intc_0 // 0
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_sha256(a: bytes, pad_size: uint64) -> bytes:
verify_sha256:
    // tests/artifacts/crypto-ops/contract.algo.ts:4-5
    // @arc4.abimethod()
    // public verify_sha256(a: bytes, pad_size: uint64): bytes {
    proto 2 1
    // tests/artifacts/crypto-ops/contract.algo.ts:6
    // const paddedA = op.bzero(pad_size).concat(a)
    frame_dig -1
    bzero
    frame_dig -2
    concat
    // tests/artifacts/crypto-ops/contract.algo.ts:7
    // const result = op.sha256(paddedA)
    sha256
    // tests/artifacts/crypto-ops/contract.algo.ts:8
    // return result
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_sha3_256(a: bytes, pad_size: uint64) -> bytes:
verify_sha3_256:
    // tests/artifacts/crypto-ops/contract.algo.ts:11-12
    // @arc4.abimethod()
    // public verify_sha3_256(a: bytes, pad_size: uint64): bytes {
    proto 2 1
    // tests/artifacts/crypto-ops/contract.algo.ts:13
    // const paddedA = op.bzero(pad_size).concat(a)
    frame_dig -1
    bzero
    frame_dig -2
    concat
    // tests/artifacts/crypto-ops/contract.algo.ts:14
    // const result = op.sha3_256(paddedA)
    sha3_256
    // tests/artifacts/crypto-ops/contract.algo.ts:15
    // return result
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_keccak_256(a: bytes, pad_size: uint64) -> bytes:
verify_keccak_256:
    // tests/artifacts/crypto-ops/contract.algo.ts:18-19
    // @arc4.abimethod()
    // public verify_keccak_256(a: bytes, pad_size: uint64): bytes {
    proto 2 1
    // tests/artifacts/crypto-ops/contract.algo.ts:20
    // const paddedA = op.bzero(pad_size).concat(a)
    frame_dig -1
    bzero
    frame_dig -2
    concat
    // tests/artifacts/crypto-ops/contract.algo.ts:21
    // const result = op.keccak256(paddedA)
    keccak256
    // tests/artifacts/crypto-ops/contract.algo.ts:22
    // return result
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_sha512_256(a: bytes, pad_size: uint64) -> bytes:
verify_sha512_256:
    // tests/artifacts/crypto-ops/contract.algo.ts:25-26
    // @arc4.abimethod()
    // public verify_sha512_256(a: bytes, pad_size: uint64): bytes {
    proto 2 1
    // tests/artifacts/crypto-ops/contract.algo.ts:27
    // const paddedA = op.bzero(pad_size).concat(a)
    frame_dig -1
    bzero
    frame_dig -2
    concat
    // tests/artifacts/crypto-ops/contract.algo.ts:28
    // const result = op.sha512_256(paddedA)
    sha512_256
    // tests/artifacts/crypto-ops/contract.algo.ts:29
    // return result
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_ed25519verify(a: bytes, b: bytes, c: bytes) -> uint64:
verify_ed25519verify:
    // tests/artifacts/crypto-ops/contract.algo.ts:33-34
    // @arc4.abimethod()
    // public verify_ed25519verify(a: bytes, b: bytes, c: bytes): boolean {
    proto 3 1
    // tests/artifacts/crypto-ops/contract.algo.ts:35
    // ensureBudget(1900, OpUpFeeSource.GroupCredit)
    pushint 1900 // 1900
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:36
    // const result = op.ed25519verify(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    ed25519verify
    // tests/artifacts/crypto-ops/contract.algo.ts:37
    // return result
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_ed25519verify_bare(a: bytes, b: bytes, c: bytes) -> uint64:
verify_ed25519verify_bare:
    // tests/artifacts/crypto-ops/contract.algo.ts:41-42
    // @arc4.abimethod()
    // public verify_ed25519verify_bare(a: bytes, b: bytes, c: bytes): boolean {
    proto 3 1
    // tests/artifacts/crypto-ops/contract.algo.ts:43
    // ensureBudget(1900, OpUpFeeSource.GroupCredit)
    pushint 1900 // 1900
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:44
    // const result = op.ed25519verifyBare(a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    ed25519verify_bare
    // tests/artifacts/crypto-ops/contract.algo.ts:45
    // return result
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_ecdsa_verify_k1(a: bytes, b: bytes, c: bytes, d: bytes, e: bytes) -> uint64:
verify_ecdsa_verify_k1:
    // tests/artifacts/crypto-ops/contract.algo.ts:48-49
    // @arc4.abimethod()
    // public verify_ecdsa_verify_k1(a: bytes, b: bytes, c: bytes, d: bytes, e: bytes): boolean {
    proto 5 1
    // tests/artifacts/crypto-ops/contract.algo.ts:50
    // ensureBudget(3000, OpUpFeeSource.GroupCredit)
    intc_3 // 3000
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:51
    // const result_k1 = op.ecdsaVerify(Ecdsa.Secp256k1, a, b, c, d, e)
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    ecdsa_verify Secp256k1
    // tests/artifacts/crypto-ops/contract.algo.ts:52
    // return result_k1
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_ecdsa_verify_r1(a: bytes, b: bytes, c: bytes, d: bytes, e: bytes) -> uint64:
verify_ecdsa_verify_r1:
    // tests/artifacts/crypto-ops/contract.algo.ts:55-56
    // @arc4.abimethod()
    // public verify_ecdsa_verify_r1(a: bytes, b: bytes, c: bytes, d: bytes, e: bytes): boolean {
    proto 5 1
    // tests/artifacts/crypto-ops/contract.algo.ts:57
    // ensureBudget(3000, OpUpFeeSource.GroupCredit)
    intc_3 // 3000
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:58
    // const result_r1 = op.ecdsaVerify(Ecdsa.Secp256r1, a, b, c, d, e)
    frame_dig -5
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    ecdsa_verify Secp256r1
    // tests/artifacts/crypto-ops/contract.algo.ts:59
    // return result_r1
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_ecdsa_recover_k1(a: bytes, b: uint64, c: bytes, d: bytes) -> bytes, bytes:
verify_ecdsa_recover_k1:
    // tests/artifacts/crypto-ops/contract.algo.ts:62-63
    // @arc4.abimethod()
    // public verify_ecdsa_recover_k1(a: bytes, b: uint64, c: bytes, d: bytes): readonly [bytes, bytes] {
    proto 4 2
    // tests/artifacts/crypto-ops/contract.algo.ts:64
    // ensureBudget(3000, OpUpFeeSource.GroupCredit)
    intc_3 // 3000
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:65
    // return op.ecdsaPkRecover(Ecdsa.Secp256k1, a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    ecdsa_pk_recover Secp256k1
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_ecdsa_recover_r1(a: bytes, b: uint64, c: bytes, d: bytes) -> bytes, bytes:
verify_ecdsa_recover_r1:
    // tests/artifacts/crypto-ops/contract.algo.ts:68-69
    // @arc4.abimethod()
    // public verify_ecdsa_recover_r1(a: bytes, b: uint64, c: bytes, d: bytes): readonly [bytes, bytes] {
    proto 4 2
    // tests/artifacts/crypto-ops/contract.algo.ts:73
    // ensureBudget(3000, OpUpFeeSource.GroupCredit)
    intc_3 // 3000
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:74
    // return op.ecdsaPkRecover(Ecdsa.Secp256r1, a, b, c, d)
    frame_dig -4
    frame_dig -3
    frame_dig -2
    frame_dig -1
    ecdsa_pk_recover Secp256r1
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_ecdsa_decompress_k1(a: bytes) -> bytes, bytes:
verify_ecdsa_decompress_k1:
    // tests/artifacts/crypto-ops/contract.algo.ts:77-78
    // @arc4.abimethod()
    // public verify_ecdsa_decompress_k1(a: bytes): readonly [bytes, bytes] {
    proto 1 2
    // tests/artifacts/crypto-ops/contract.algo.ts:79
    // ensureBudget(700, OpUpFeeSource.GroupCredit)
    pushint 700 // 700
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:80
    // return op.ecdsaPkDecompress(Ecdsa.Secp256k1, a)
    frame_dig -1
    ecdsa_pk_decompress Secp256k1
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_ecdsa_decompress_r1(a: bytes) -> bytes, bytes:
verify_ecdsa_decompress_r1:
    // tests/artifacts/crypto-ops/contract.algo.ts:83-84
    // @arc4.abimethod()
    // public verify_ecdsa_decompress_r1(a: bytes): readonly [bytes, bytes] {
    proto 1 2
    // tests/artifacts/crypto-ops/contract.algo.ts:85
    // ensureBudget(700, OpUpFeeSource.GroupCredit)
    pushint 700 // 700
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:86
    // return op.ecdsaPkDecompress(Ecdsa.Secp256r1, a)
    frame_dig -1
    ecdsa_pk_decompress Secp256r1
    retsub


// tests/artifacts/crypto-ops/contract.algo.ts::CryptoOpsContract.verify_vrf_verify(a: bytes, b: bytes, c: bytes) -> bytes, uint64:
verify_vrf_verify:
    // tests/artifacts/crypto-ops/contract.algo.ts:89-90
    // @arc4.abimethod()
    // public verify_vrf_verify(a: bytes, b: bytes, c: bytes): readonly [bytes, boolean] {
    proto 3 2
    // tests/artifacts/crypto-ops/contract.algo.ts:91
    // ensureBudget(5700, OpUpFeeSource.GroupCredit)
    pushint 5700 // 5700
    intc_0 // 0
    callsub ensure_budget
    // tests/artifacts/crypto-ops/contract.algo.ts:92
    // const result = op.vrfVerify(VrfVerify.VrfAlgorand, a, b, c)
    frame_dig -3
    frame_dig -2
    frame_dig -1
    vrf_verify VrfAlgorand
    // tests/artifacts/crypto-ops/contract.algo.ts:93
    // return result
    retsub


// _puya_lib.util.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    proto 2 0
    frame_dig -2
    pushint 10 // 10
    +

ensure_budget_while_top@1:
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@7
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec_3 // 0x068101
    itxn_field ApprovalProgram
    bytec_3 // 0x068101
    itxn_field ClearStateProgram
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    intc_0 // 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_1@4:
    global MinTxnFee
    itxn_field Fee

ensure_budget_switch_case_next@6:
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_after_while@7:
    retsub
