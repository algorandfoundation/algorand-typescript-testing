{
    "hints": {
        "verify_sha256(byte[],uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_sha3_256(byte[],uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_keccak_256(byte[],uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_sha512_256(byte[],uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_ed25519verify(byte[],byte[],byte[])bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_ed25519verify_bare(byte[],byte[],byte[])bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_ecdsa_verify_k1(byte[],byte[],byte[],byte[],byte[])bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_ecdsa_verify_r1(byte[],byte[],byte[],byte[],byte[])bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_ecdsa_recover_k1(byte[],uint64,byte[],byte[])(byte[],byte[])": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_ecdsa_recover_r1(byte[],uint64,byte[],byte[])(byte[],byte[])": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_ecdsa_decompress_k1(byte[])(byte[],byte[])": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_ecdsa_decompress_r1(byte[])(byte[],byte[])": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_vrf_verify(byte[],byte[],byte[])(byte[],bool)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "verify_mimc(byte[])byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "CryptoOpsContract",
        "methods": [
            {
                "name": "verify_sha256",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "pad_size"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_sha3_256",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "pad_size"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_keccak_256",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "pad_size"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_sha512_256",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "pad_size"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "verify_ed25519verify",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "verify_ed25519verify_bare",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "verify_ecdsa_verify_k1",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    },
                    {
                        "type": "byte[]",
                        "name": "d"
                    },
                    {
                        "type": "byte[]",
                        "name": "e"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "verify_ecdsa_verify_r1",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    },
                    {
                        "type": "byte[]",
                        "name": "d"
                    },
                    {
                        "type": "byte[]",
                        "name": "e"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "verify_ecdsa_recover_k1",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    },
                    {
                        "type": "byte[]",
                        "name": "d"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],byte[])"
                }
            },
            {
                "name": "verify_ecdsa_recover_r1",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "uint64",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    },
                    {
                        "type": "byte[]",
                        "name": "d"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],byte[])"
                }
            },
            {
                "name": "verify_ecdsa_decompress_k1",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],byte[])"
                }
            },
            {
                "name": "verify_ecdsa_decompress_r1",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],byte[])"
                }
            },
            {
                "name": "verify_vrf_verify",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    },
                    {
                        "type": "byte[]",
                        "name": "b"
                    },
                    {
                        "type": "byte[]",
                        "name": "c"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],bool)"
                }
            },
            {
                "name": "verify_mimc",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "a"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}