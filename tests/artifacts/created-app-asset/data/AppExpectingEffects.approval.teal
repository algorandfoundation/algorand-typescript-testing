#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0 6
    bytecblock 0x151f7c75
    // tests/artifacts/created-app-asset/contract.algo.ts:6
    // export class AppExpectingEffects extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x6d3a0439 0x62a0ef62 // method "create_group(acfg,appl)(uint64,uint64)", method "log_group(appl)void"
    txna ApplicationArgs 0
    match main_create_group_route@3 main_log_group_route@4

main_after_if_else@11:
    // tests/artifacts/created-app-asset/contract.algo.ts:6
    // export class AppExpectingEffects extends arc4.Contract {
    intc_1 // 0
    return

main_log_group_route@4:
    // tests/artifacts/created-app-asset/contract.algo.ts:17
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/created-app-asset/contract.algo.ts:6
    // export class AppExpectingEffects extends arc4.Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // appl
    ==
    assert // transaction type is appl
    // tests/artifacts/created-app-asset/contract.algo.ts:17
    // @arc4.abimethod()
    callsub log_group
    intc_0 // 1
    return

main_create_group_route@3:
    // tests/artifacts/created-app-asset/contract.algo.ts:7
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // tests/artifacts/created-app-asset/contract.algo.ts:6
    // export class AppExpectingEffects extends arc4.Contract {
    txn GroupIndex
    pushint 2 // 2
    -
    dup
    gtxns TypeEnum
    pushint 3 // acfg
    ==
    assert // transaction type is acfg
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // appl
    ==
    assert // transaction type is appl
    // tests/artifacts/created-app-asset/contract.algo.ts:7
    // @arc4.abimethod()
    callsub create_group
    swap
    itob
    swap
    itob
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_bare_routing@7:
    // tests/artifacts/created-app-asset/contract.algo.ts:6
    // export class AppExpectingEffects extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/artifacts/created-app-asset/contract.algo.ts::AppExpectingEffects.create_group(assetCreate: uint64, appCreate: uint64) -> uint64, uint64:
create_group:
    // tests/artifacts/created-app-asset/contract.algo.ts:7-8
    // @arc4.abimethod()
    // public create_group(assetCreate: gtxn.AssetConfigTxn, appCreate: gtxn.ApplicationTxn): readonly [uint64, uint64] {
    proto 2 2
    // tests/artifacts/created-app-asset/contract.algo.ts:9
    // assert(assetCreate.createdAsset.id, 'expected asset created')
    frame_dig -2
    gtxns CreatedAssetID
    dup
    assert // expected asset created
    // tests/artifacts/created-app-asset/contract.algo.ts:10
    // assert(op.gaid(assetCreate.groupIndex) === assetCreate.createdAsset.id, 'expected correct asset id')
    frame_dig -2
    gtxns GroupIndex
    gaids
    dig 1
    ==
    assert // expected correct asset id
    // tests/artifacts/created-app-asset/contract.algo.ts:11
    // assert(appCreate.createdApp.id, 'expected app created')
    frame_dig -1
    gtxns CreatedApplicationID
    dup
    assert // expected app created
    // tests/artifacts/created-app-asset/contract.algo.ts:12
    // assert(op.gaid(appCreate.groupIndex) === appCreate.createdApp.id, 'expected correct app id')
    frame_dig -1
    gtxns GroupIndex
    gaids
    dig 1
    ==
    assert // expected correct app id
    // tests/artifacts/created-app-asset/contract.algo.ts:14
    // return [assetCreate.createdAsset.id, appCreate.createdApp.id]
    retsub


// tests/artifacts/created-app-asset/contract.algo.ts::AppExpectingEffects.log_group(appCall: uint64) -> void:
log_group:
    // tests/artifacts/created-app-asset/contract.algo.ts:17-18
    // @arc4.abimethod()
    // public log_group(appCall: gtxn.ApplicationTxn): void {
    proto 1 0
    // tests/artifacts/created-app-asset/contract.algo.ts:19
    // assert(appCall.appArgs(0) === methodSelector('some_value()uint64'), 'expected correct method called')
    frame_dig -1
    intc_1 // 0
    gtxnsas ApplicationArgs
    pushbytes 0xd3479e65 // method "some_value()uint64"
    ==
    assert // expected correct method called
    // tests/artifacts/created-app-asset/contract.algo.ts:20
    // assert(appCall.numLogs === 1, 'expected logs')
    frame_dig -1
    gtxns NumLogs
    intc_0 // 1
    ==
    assert // expected logs
    // tests/artifacts/created-app-asset/contract.algo.ts:21
    // assert(interpretAsArc4<UintN64>(appCall.lastLog, 'log').native === (appCall.groupIndex + 1) * Global.groupSize)
    frame_dig -1
    gtxns LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    bytec_0 // 0x151f7c75
    ==
    assert // Bytes has valid prefix
    btoi
    frame_dig -1
    gtxns GroupIndex
    intc_0 // 1
    +
    global GroupSize
    *
    ==
    assert
    retsub
