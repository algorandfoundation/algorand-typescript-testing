#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1
    bytecblock "oca" "txn"
    // tests/artifacts/box-contract/contract.algo.ts:4
    // export class BoxContract extends arc4.Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xf87ada89 0xef186cf7 // method "storeEnums()void", method "read_enums()(uint64,uint64)"
    txna ApplicationArgs 0
    match main_storeEnums_route@3 main_read_enums_route@4

main_after_if_else@11:
    // tests/artifacts/box-contract/contract.algo.ts:4
    // export class BoxContract extends arc4.Contract {
    pushint 0 // 0
    return

main_read_enums_route@4:
    // tests/artifacts/box-contract/contract.algo.ts:14
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub read_enums
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_storeEnums_route@3:
    // tests/artifacts/box-contract/contract.algo.ts:8
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub storeEnums
    intc_0 // 1
    return

main_bare_routing@7:
    // tests/artifacts/box-contract/contract.algo.ts:4
    // export class BoxContract extends arc4.Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// tests/artifacts/box-contract/contract.algo.ts::BoxContract.storeEnums() -> void:
storeEnums:
    // tests/artifacts/box-contract/contract.algo.ts:8-9
    // @arc4.abimethod()
    // public storeEnums(): void {
    proto 0 0
    // tests/artifacts/box-contract/contract.algo.ts:10
    // this.oca.value = arc4.OnCompleteAction.OptIn
    intc_0 // 1
    itob
    // tests/artifacts/box-contract/contract.algo.ts:5
    // oca = Box<arc4.OnCompleteAction>({ key: Bytes('oca') })
    bytec_0 // "oca"
    // tests/artifacts/box-contract/contract.algo.ts:10
    // this.oca.value = arc4.OnCompleteAction.OptIn
    swap
    box_put
    // tests/artifacts/box-contract/contract.algo.ts:11
    // this.txn.value = TransactionType.ApplicationCall
    pushint 6 // 6
    itob
    // tests/artifacts/box-contract/contract.algo.ts:6
    // txn = Box<TransactionType>({ key: Bytes('txn') })
    bytec_1 // "txn"
    // tests/artifacts/box-contract/contract.algo.ts:11
    // this.txn.value = TransactionType.ApplicationCall
    swap
    box_put
    retsub


// tests/artifacts/box-contract/contract.algo.ts::BoxContract.read_enums() -> bytes:
read_enums:
    // tests/artifacts/box-contract/contract.algo.ts:14-15
    // @arc4.abimethod()
    // public read_enums(): Tuple<[UintN64, UintN64]> {
    proto 0 1
    // tests/artifacts/box-contract/contract.algo.ts:16
    // assert(op.Box.get(Bytes('oca'))[0] === op.itob(this.oca.value))
    bytec_0 // "oca"
    box_get
    pop
    // tests/artifacts/box-contract/contract.algo.ts:5
    // oca = Box<arc4.OnCompleteAction>({ key: Bytes('oca') })
    bytec_0 // "oca"
    // tests/artifacts/box-contract/contract.algo.ts:16
    // assert(op.Box.get(Bytes('oca'))[0] === op.itob(this.oca.value))
    box_get
    swap
    btoi
    swap
    assert // Box must have value
    itob
    ==
    assert
    // tests/artifacts/box-contract/contract.algo.ts:17
    // assert(op.Box.get(Bytes('txn'))[0] === op.itob(this.txn.value))
    bytec_1 // "txn"
    box_get
    pop
    // tests/artifacts/box-contract/contract.algo.ts:6
    // txn = Box<TransactionType>({ key: Bytes('txn') })
    bytec_1 // "txn"
    // tests/artifacts/box-contract/contract.algo.ts:17
    // assert(op.Box.get(Bytes('txn'))[0] === op.itob(this.txn.value))
    box_get
    swap
    btoi
    swap
    assert // Box must have value
    itob
    ==
    assert
    // tests/artifacts/box-contract/contract.algo.ts:5
    // oca = Box<arc4.OnCompleteAction>({ key: Bytes('oca') })
    bytec_0 // "oca"
    // tests/artifacts/box-contract/contract.algo.ts:19
    // return new Tuple(new UintN64(this.oca.value), new UintN64(this.txn.value))
    box_get
    swap
    btoi
    swap
    assert // Box must have value
    itob
    // tests/artifacts/box-contract/contract.algo.ts:6
    // txn = Box<TransactionType>({ key: Bytes('txn') })
    bytec_1 // "txn"
    // tests/artifacts/box-contract/contract.algo.ts:19
    // return new Tuple(new UintN64(this.oca.value), new UintN64(this.txn.value))
    box_get
    swap
    btoi
    swap
    assert // Box must have value
    itob
    concat
    retsub
